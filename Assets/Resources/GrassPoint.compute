#pragma kernel CSMain

#include "Simplex.compute"

struct GrassData
{
    float4 position;
    float4 rotation;
};

RWStructuredBuffer<GrassData> grassBuffer;

uint _GridWidth, _GridHeight, _Dimension, _Scale;
float _DisplacementStrength, _Spacing, _Density, _Frequency;

[numthreads(10, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    uint totalGrassInstances = _Dimension * 3;
    if (index >= totalGrassInstances)
        return;

    GrassData grass;

    int x = int((index / 3u) % _GridWidth);
    int z = int((index / 3u) / _GridHeight);

    // Data input here
    grass.position = float4(x * _Spacing * _Density, 0, z * _Spacing * _Density, 0);

    float2 noiseInput = grass.position.xz * _Frequency;
    float noiseValue = abs(snoise(float3(noiseInput, 0.0))) * _DisplacementStrength;

    // Data input here
    grass.position.y += noiseValue;

    if ((index % 3u) == 0)
    {
        grass.rotation = float4(0, 0, 0, 0); // No rotation
    }
    else if ((index % 3u) == 1)
    {
        grass.rotation = float4(0, 60, 0, 0); // 60 degrees rotation
    }
    else
    {
        grass.rotation = float4(0, -60, 0, 0); // -60 degrees rotation
    }

    grassBuffer[index] = grass;
}
