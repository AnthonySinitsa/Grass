#pragma kernel CSMain

#include "Simplex.compute"

struct GrassData
{
    float4 position;
    float4 rotation;
};

RWStructuredBuffer<GrassData> _GrassBuffer;

uint _GridWidth, _GridHeight, _Dimension, _Scale;
float _DisplacementStrength, _Spacing;

[numthreads(10, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    uint totalGrassInstances = _Dimension * 3;
    if (index >= totalGrassInstances)
        return;

    GrassData grass;

    int x = int((index / 3u) % _GridWidth);
    int z = int((index / 3u) / _GridHeight);
    float _Density = 0.5;
    grass.position = float4(x * _Spacing * _Density, 0, z * _Spacing * _Density, 0);
    grass.position.y += 
        abs(snoise(float3(
            grass.position.xz * 10.0f, 0.0f) * _DisplacementStrength
        ));


    if ((index % 3u) == 0)
    {
        grass.rotation = float4(0, 0, 0, 0); // No rotation
    }
    else if ((index % 3u) == 1)
    {
        grass.rotation = float4(0, 60, 0, 0); // 60 degrees rotation
    }
    else
    {
        grass.rotation = float4(0, -60, 0, 0); // -60 degrees rotation
    }

    _GrassBuffer[index] = grass;
}
