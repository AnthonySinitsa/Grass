#pragma kernel CSMain
#include "Random.cginc"

struct GrassBlade
{
    float3 position;
    float rotation;
};

RWStructuredBuffer<GrassBlade> grassBuffer;

int numChunks, chunkDensity;
float chunkSize;

[numthreads(10, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint totalGrassBlades = (uint)(numChunks * numChunks * chunkDensity * chunkDensity);
    if (id.x >= totalGrassBlades) return;

    GrassBlade blade;

    // Calculate chunk index and position within chunk
    uint chunkIndex = id.x / (chunkDensity * chunkDensity);
    uint bladeIndex = id.x % (chunkDensity * chunkDensity);

    int chunkX = chunkIndex % numChunks;
    int chunkZ = chunkIndex / numChunks;

    int bladeX = bladeIndex % chunkDensity;
    int bladeZ = bladeIndex / chunkDensity;

    // Initialize random number generator with a unique seed
    uint seed = id.x + 1;
    float randomX = randValue(seed) - 0.2;
    float randomZ = randValue(seed * 2) - 0.2;

    // Calculate world position and scale by chunk size, adding random offsets
    float3 position;
    position.x = chunkX * chunkSize + (bladeX * chunkSize) / chunkDensity + randomX * (chunkSize / chunkDensity);
    position.y = 0.5;
    position.z = chunkZ * chunkSize + (bladeZ * chunkSize) / chunkDensity + randomZ * (chunkSize / chunkDensity);

    // Calculate random rotation
    float rotation = randValue(seed * 3) * 360.0;

    blade.position = position;
    blade.rotation = rotation;

    grassBuffer[id.x] = blade;
}