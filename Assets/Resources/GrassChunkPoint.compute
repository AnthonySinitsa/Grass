#pragma kernel CSMain

struct GrassBlade
{
    float3 position;
};

RWStructuredBuffer<GrassBlade> grassBuffer;

int numChunks;
int chunkDensity;

[numthreads(10, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint totalGrassBlades = (uint)(numChunks * numChunks * chunkDensity * chunkDensity);
    if (id.x >= totalGrassBlades) return;

    GrassBlade blade;

    // Define the size of each chunk in world units
    float chunkSize = 10;

    // Calculate chunk index and position within chunk
    uint chunkIndex = id.x / (chunkDensity * chunkDensity);
    uint bladeIndex = id.x % (chunkDensity * chunkDensity);

    int chunkX = chunkIndex % numChunks;
    int chunkZ = chunkIndex / numChunks;

    int bladeX = bladeIndex % chunkDensity;
    int bladeZ = bladeIndex / chunkDensity;

    // Calculate world position and scale by chunk size
    float3 position;
    position.x = chunkX * chunkSize + (bladeX * chunkSize) / chunkDensity;
    position.y = 0.0;
    position.z = chunkZ * chunkSize + (bladeZ * chunkSize) / chunkDensity;

    blade.position = position;

    grassBuffer[id.x] = blade;
}