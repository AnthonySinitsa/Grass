#pragma kernel CSMain
#include "Random.cginc"
#include "VoronoiNoise.compute"

struct GrassBlade
{
    float3 position;
    float facing;
    float tilt;
    float bend;
    float width;
};

RWStructuredBuffer<GrassBlade> grassBuffer;

int numChunks, chunkDensity, seed, startIndex;
float chunkSize, globalTime, voronoiScale, tilt, bend, width;
float3 position;

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint bladeIndex = startIndex + id.x;
    uint totalGrassBlades = (uint)(numChunks * numChunks * chunkDensity * chunkDensity);
    if (bladeIndex >= totalGrassBlades) return;

    GrassBlade blade;

    // Calculate chunk and local indices correctly
    uint bladesPerChunk = chunkDensity * chunkDensity;
    uint currentChunkIndex = bladeIndex / bladesPerChunk;
    uint localBladeIndex = bladeIndex % bladesPerChunk;

    // Calculate chunk position
    int chunkX = currentChunkIndex % numChunks;
    int chunkZ = currentChunkIndex / numChunks;

    // Calculate local position within chunk
    int localX = localBladeIndex % chunkDensity;
    int localZ = localBladeIndex / chunkDensity;

    // Initialize random number generator with a unique seed
    uint randomSeed = bladeIndex + 1;
    float randomX = randValue(randomSeed) - 0.2;
    float randomZ = randValue(randomSeed * 2) - 0.2;

    // Calculate world position
    float worldX = chunkX * chunkSize + (localX * chunkSize / chunkDensity) + randomX * (chunkSize / chunkDensity);
    float worldZ = chunkZ * chunkSize + (localZ * chunkSize / chunkDensity) + randomZ * (chunkSize / chunkDensity);
    
    // Calculate height using voronoi noise
    float voronoiValue = voronoi(float2(worldX, worldZ) * voronoiScale, globalTime);
    
    blade.position = float3(worldX, voronoiValue, worldZ);
    blade.facing = randValue(randomSeed * 3) * 360.0;
    blade.tilt = tilt;
    blade.bend = bend;
    blade.width = width;

    grassBuffer[bladeIndex] = blade;
}